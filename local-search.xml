<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>numpy对数据集的基本操作：归一化、最值、均值、读取与保存</title>
    <link href="/2021/01/20/numpy%E5%AF%B9%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%9A%E5%BD%92%E4%B8%80%E5%8C%96%E3%80%81%E6%9C%80%E5%80%BC%E3%80%81%E5%9D%87%E5%80%BC%E3%80%81%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/"/>
    <url>/2021/01/20/numpy%E5%AF%B9%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%9A%E5%BD%92%E4%B8%80%E5%8C%96%E3%80%81%E6%9C%80%E5%80%BC%E3%80%81%E5%9D%87%E5%80%BC%E3%80%81%E8%AF%BB%E5%8F%96%E4%B8%8E%E4%BF%9D%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="numpy对数据集的基本操作：归一化、最值、均值、读取与保存"><a href="#numpy对数据集的基本操作：归一化、最值、均值、读取与保存" class="headerlink" title="numpy对数据集的基本操作：归一化、最值、均值、读取与保存"></a>numpy对数据集的基本操作：归一化、最值、均值、读取与保存</h1><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><h2 id="一、-numpy对数据集的存取"><a href="#一、-numpy对数据集的存取" class="headerlink" title="一、 numpy对数据集的存取"></a>一、 numpy对数据集的存取</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># 当前工作目录</span><br><span class="hljs-symbol">pwd:</span> ~<br><br><span class="hljs-symbol">origin_dataset:</span> ~/example.csv<br></code></pre></td></tr></table></figure><p>最正宗的展示格式应该是txt，但csv格式文件只不过是用分隔符分开的数据组成的简单文本文件，因此这里用csv也无伤大雅。而且许多数据集也都是csv格式。</p><ol><li><strong>读取</strong>csv到变量：loadtxt()</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">np</span><span class="hljs-selector-class">.loadtxt</span>(<span class="hljs-selector-tag">filepath</span>, <span class="hljs-selector-tag">delimiter</span>, <span class="hljs-selector-tag">usecols</span>, <span class="hljs-selector-tag">unpack</span>, ...)<br></code></pre></td></tr></table></figure><ul><li><strong>filepath</strong>:加载文件路径</li><li><strong>delimiter</strong>:加载文件分隔符</li><li><strong>usecols</strong>:加载数据文件中列索引,<strong>人话</strong>：<em>指定加载数据中的第几列，默认全加载</em></li><li><strong>unpack</strong>:当加载多列数据时是否需要将数据列进行解耦赋值给不同的变量</li></ul><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">data_path = <span class="hljs-string">&quot;~/example.csv&quot;</span></span><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">data = np.loadtxt(data_path, delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)</span><br><br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python">data</span><br>([...]<br>    [...]<br>    ...<br>    [...])<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>保存</strong>变量到文件：savetxt()</li></ol><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">np</span>.savetxt(fileName, <span class="hljs-class"><span class="hljs-keyword">data</span>, ...)</span><br></code></pre></td></tr></table></figure><ul><li><strong>fileName</strong>:保存文件路径和名称</li><li><strong>data</strong>:需要保存的数据</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">data_path</span> = <span class="hljs-string">&quot;~/example.csv&quot;</span><br><span class="hljs-title">np</span>.savetxt(<span class="hljs-string">&quot;saveddata.csv&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br></code></pre></td></tr></table></figure><h2 id="二、numpy获取最值、均值"><a href="#二、numpy获取最值、均值" class="headerlink" title="二、numpy获取最值、均值"></a>二、numpy获取最值、均值</h2><p>测试数据</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs inform7">&gt;&gt;&gt; a=<span class="hljs-comment">[<span class="hljs-comment">[1,2,3]</span>,<span class="hljs-comment">[2,5,7]</span>,<span class="hljs-comment">[6,3,6]</span>,<span class="hljs-comment">[7,3,2]</span>]</span><br>&gt;&gt;&gt; x=np.asanyarray(a)<br>&gt;&gt;&gt; x<br>array(<span class="hljs-comment">[<span class="hljs-comment">[1, 2, 3]</span>,</span><br><span class="hljs-comment">       <span class="hljs-comment">[2, 5, 7]</span>,</span><br><span class="hljs-comment">       <span class="hljs-comment">[6, 3, 6]</span>,</span><br><span class="hljs-comment">       <span class="hljs-comment">[7, 3, 2]</span>]</span>)<br></code></pre></td></tr></table></figure><p>numpy集成了获取数据最值、均值甚至更多操作的方法，这一点用起来和matlab很像</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">np.<span class="hljs-keyword">max</span>(<span class="hljs-built_in">data</span>, axis, <span class="hljs-params">...</span>)<br>np.<span class="hljs-keyword">min</span>(<span class="hljs-built_in">data</span>, axis, <span class="hljs-params">...</span>)<br>np.mean(<span class="hljs-built_in">data</span>, axis, <span class="hljs-params">...</span>)<br></code></pre></td></tr></table></figure><p>需要注意的是最常用的<code>axis</code>选项，对于2维数组（矩阵）而言：</p><ul><li><strong>axis = None</strong>: （默认）返回所有数据（行、列）中的最值/均值，返回一个数</li><li><strong>axis = 0</strong>: 返回所有列的最值/均值，相当于返回一个行向量（元素数与<strong>列数</strong>相同的array）</li><li><strong>axis = 1</strong>: 返回所有行的最值/均值，相当于返回一个列向量（元素数与<strong>行数</strong>相同的array）</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">max</span>(x)<br><span class="hljs-number">7</span><br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">max</span>(x,axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">array</span>([<span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">max</span>(x,axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">array</span>([<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">min</span>(x)<br><span class="hljs-number">1</span><br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">min</span>(x,axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])<br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">min</span>(x,axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">mean</span>(x)<br><span class="hljs-number">3.9166666666666665</span><br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">mean</span>(x,axis=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">array</span>([<span class="hljs-number">4</span>.  , <span class="hljs-number">3.25</span>, <span class="hljs-number">4.5</span> ])<br><br>&gt;&gt;&gt; <span class="hljs-built_in">np</span>.<span class="hljs-built_in">mean</span>(x,axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">array</span>([<span class="hljs-number">2</span>.        , <span class="hljs-number">4.66666667</span>, <span class="hljs-number">5</span>.        , <span class="hljs-number">4</span>.        ])<br></code></pre></td></tr></table></figure><h2 id="三、numpy对数据进行归一化"><a href="#三、numpy对数据进行归一化" class="headerlink" title="三、numpy对数据进行归一化"></a>三、numpy对数据进行归一化</h2><p>以下是笔者处理KDD99数据集时归一化的小demo，也是在此途中遇到的上述问题，记录下来，供自己以后参考。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;normlizing...&#x27;</span>)<br>kdd99_numeric = np.loadtxt(numeric_datasets, <span class="hljs-attribute">delimiter</span>=<span class="hljs-string">&#x27;,&#x27;</span>)<br>mean = np.mean(kdd99_numeric, <span class="hljs-attribute">axis</span>=0)<br>max = np.max(kdd99_numeric, <span class="hljs-attribute">axis</span>=0) + 1e-8<br>min = np.min(kdd99_numeric, <span class="hljs-attribute">axis</span>=0)<br>kdd99_numeric_norm = (kdd99_numeric - mean) / (max - min)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;Done&#x27;</span>)<br><span class="hljs-builtin-name">print</span>(kdd99_numeric_norm)<br><br>np.savetxt(norm_numeric_datasets, kdd99_numeric_norm, <span class="hljs-attribute">delimiter</span>=<span class="hljs-string">&#x27;,&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述使用的是所谓 <strong>min-max标准化（Min-Max Normalization）（线性函数归一化）</strong> 方法，除此之外，在笔者还了解到还存在 <strong>Z-score标准化方法</strong> ，关于此信息可以查阅参考资料[2]。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]. <a href="https://blog.csdn.net/MESSI_JAMES/article/details/80487389">Numpy读取csv文件</a><br>[2]. <a href="https://blog.csdn.net/program_developer/article/details/78637711">机器学习-数据归一化方法（Normalization Method）</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的符号分隔值格式(xsv)文件读取</title>
    <link href="/2021/01/18/Python%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <url>/2021/01/18/Python%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Python的符号分隔值格式-xsv-文件读取"><a href="#Python的符号分隔值格式-xsv-文件读取" class="headerlink" title="Python的符号分隔值格式(xsv)文件读取"></a>Python的符号分隔值格式(xsv)文件读取</h1><h2 id="一、xsv文件介绍"><a href="#一、xsv文件介绍" class="headerlink" title="一、xsv文件介绍"></a>一、xsv文件介绍</h2><p>xsv(x-separated values)x分隔值文件格式，最常见的是</p><blockquote><p>csv(Comma-Separated Values, 逗号分隔值)<br>tsv(Tab-separated values, 制表符分隔值)<br><font size=2, color='gray'> xsv 名称是笔者杜撰，不确定是否真的有这个叫法，也不确定除了上述两种格式是否还有其它格式，即其它分隔方式。这样做的目的是将此类文件统称起来。 </font></p></blockquote><p>一定意义上来说，这类文件格式的区别其实就是分隔符不同，在python中体现为<code>delimiter</code>等参数不同。</p><p>此类文件用简单的<strong>文件编辑器</strong>即可打开，如 <em>Windows系统自带的记事本(nptepad)、关爱孤儿的vim编辑器</em> 以及 <em>VSCode</em> 等。不过一般此类文件用于存储大批量有规则的数据，主要使用<code>code</code>进行批量自动化读取和更多操作。</p><p>以下是来自wikipida的解释：</p><h3 id="1、csv格式"><a href="#1、csv格式" class="headerlink" title="1、csv格式"></a>1、csv格式</h3><p>制表符分隔值 （Tab-separated values，TSV）格式文件是一种用于储存数据的文本格式文件，其数据以表格结构（例如 数据库 或 电子表格 数据）储存。每一行储存一条记录。 每条记录的各个字段间以制表符作为分隔。</p><p>TSV 格式是一种被广泛支持的文件格式，它经常用来在不同的计算机程序之间传递数据，支持格式。 例如，TSV文件可以用来在数据库和电子表格之间传递数据。</p><p>TSV 格式是逗号分隔值（CSV）格式的一种变体，CSV 格式以逗号作为字段间的分隔符号，因为逗号本身是一种很常见的文本数据，因此常常会引起一些问题，而制表符在文本数据中相对少见。在 IANA 标准中，数据字段内禁止使用制表符。</p><h3 id="2、tsv格式"><a href="#2、tsv格式" class="headerlink" title="2、tsv格式"></a>2、tsv格式</h3><p>逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。通常，所有记录都有完全相同的字段序列。</p><p>CSV文件格式的通用标准并不存在，但是在RFC 4180中有基础性的描述。使用的字符编码同样没有被指定，但是7-bit ASCII是最基本的通用编码。</p><ul><li>由于笔者是通过关注到tshark解析pcap文件的代码了解到tsv文件的，因此以下记录了解析得到的tsv文件的文件头部（位于tsv文件的第一行，指示了后序每行数据每列代表的内容）</li></ul><p><img src="https://gitee.com/songz7026/image-pool/raw/master/Python/xsv_tsv_header.jpg" alt="pcap解析得到的tsv文件的文件头"></p><h2 id="二、Python-I-O-简介（文件读取）"><a href="#二、Python-I-O-简介（文件读取）" class="headerlink" title="二、Python I/O 简介（文件读取）"></a>二、Python I/O 简介（文件读取）</h2><p>涉及到对xsv文件的操作，需要了解Python文件读取的主要方法。</p><h3 id="1、open-filename-mode-…"><a href="#1、open-filename-mode-…" class="headerlink" title="1、open(filename, mode, …)"></a>1、open(filename, mode, …)</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">open</span>(filename, <span class="hljs-keyword">mode</span>, ...)<br>(<span class="hljs-symbol">&lt;PATH&gt;</span>, <span class="hljs-string">&quot;rwxts...&quot;</span>, ...)//<span class="hljs-keyword">mode</span>可以参看builtins.<span class="hljs-keyword">py</span>源代码中的注释<br></code></pre></td></tr></table></figure><ul><li><code>return</code>: 方法返回一个<code>file</code>对象，该对象可以进行进一步操作。</li><li><code>filename</code>: 操作的的文件路径</li><li><code>mode</code>: 文件操作模式选项，可以进一步细分为<code>rwx...</code><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim">========= ===============================================================<br>Character Meaning 来自builtins.<span class="hljs-keyword">py</span>中<span class="hljs-keyword">open</span>()方法下的注释<br>--------- ---------------------------------------------------------------<br>文件打开模式，特别注意光标的位置（光标向后的位置会被覆盖）<br><span class="hljs-string">&#x27;r&#x27;</span>       <span class="hljs-keyword">open</span> <span class="hljs-keyword">for</span> reading (default) 只读(默认) 光标位于开头<br><span class="hljs-string">&#x27;w&#x27;</span>       <span class="hljs-keyword">open</span> <span class="hljs-keyword">for</span> writing, truncating the <span class="hljs-keyword">file</span> <span class="hljs-keyword">first</span> 只写 光标位于开头 原有内容删除 若文件不存在则新建文件<br><span class="hljs-string">&#x27;x&#x27;</span>       create <span class="hljs-keyword">a</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">file</span> <span class="hljs-built_in">and</span> <span class="hljs-keyword">open</span> it <span class="hljs-keyword">for</span> writing 只写 新建文件 如果该文件已存在则会报错<br><span class="hljs-string">&#x27;a&#x27;</span>       <span class="hljs-keyword">open</span> <span class="hljs-keyword">for</span> writing, appending <span class="hljs-keyword">to</span> the end of the <span class="hljs-keyword">file</span> <span class="hljs-keyword">if</span> it <span class="hljs-built_in">exists</span> 只写（追加<span class="hljs-keyword">append</span>） 光标位于最后 若文件不存在则新建文件<br><br>返回文件的形式<br><span class="hljs-string">&#x27;b&#x27;</span>       binary <span class="hljs-keyword">mode</span> 返回binary文件， 对于<span class="hljs-string">&#x27;byte&#x27;</span>组成的文件<br><span class="hljs-string">&#x27;t&#x27;</span>       text <span class="hljs-keyword">mode</span> (default) 返回文本文件， 对于<span class="hljs-string">&quot;str&quot;</span>组成的文件 <br>覆盖<br><span class="hljs-string">&#x27;+&#x27;</span>       <span class="hljs-keyword">open</span> <span class="hljs-keyword">a</span> disk <span class="hljs-keyword">file</span> <span class="hljs-keyword">for</span> updating (reading <span class="hljs-built_in">and</span> writing) 打开一个文件进行更新(可读可写)<br><br>其它<br><span class="hljs-string">&#x27;U&#x27;</span>       universal newline <span class="hljs-keyword">mode</span> (deprecated) 通用换行模式<br>========= ===============================================================<br></code></pre></td></tr></table></figure>关于open()方法更详细的操作可以参考</li></ul><ol><li>源代码( <em>在编辑器中查找open()的定义位置</em> )中的注释，</li><li><a href="https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files">官方文档</a></li><li><a href="https://www.runoob.com/python/python-func-open.html">菜鸟教程：Python open() 函数</a></li></ol><h4 id="file对象方法"><a href="#file对象方法" class="headerlink" title="file对象方法"></a><code>file</code>对象方法</h4><ul><li><code>file.read([size])</code>：size 未指定则返回整个文件，如果文件大小 &gt;2 倍内存则有问题，f.read()读到文件尾时返回””(空字串)。</li><li><code>file.readline()</code>：返回一行。</li><li><code>file.readlines([size])</code>：返回包含size行的列表, size 未指定则返回全部行。</li><li><code>for line in f: print line</code> ：通过迭代器访问。</li><li><code>f.write(&quot;hello\n&quot;)</code>：如果要写入字符串以外的数据,先将他转换为字符串。</li><li><code>f.tell()</code>：返回一个整数,表示当前文件指针的位置(就是到文件头的字节数)。</li><li><code>f.seek(偏移量,[起始位置])</code>：用来移动文件指针。<br>偏移量: 单位为字节，可正可负<br>起始位置: <strong>0</strong> - 文件头, 默认值; <strong>1</strong> - 当前位置; <strong>2</strong> - 文件尾</li><li><code>f.close()</code>： 关闭文件</li></ul><h3 id="2、with关键字"><a href="#2、with关键字" class="headerlink" title="2、with关键字"></a>2、with关键字</h3><blockquote><p>引子：使用内置open()打开文件之后，要close()以正确关闭以释放资源</p></blockquote><p><code>open()</code>操作常常与<code>with</code>关键字连用，解决引子中麻烦的累赘问题</p><ul><li>对比之后，显而易见</li></ul><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable"><span class="hljs-keyword">try</span></span> <span class="hljs-function"><span class="hljs-title">open</span>():</span><br><span class="hljs-function">...</span><br><span class="hljs-function"><span class="hljs-variable"><span class="hljs-keyword">finally</span></span>:</span><br><span class="hljs-function"><span class="hljs-title">close</span>()</span><br></code></pre></td></tr></table></figure><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">with</span> <span class="hljs-keyword">open</span>()<br>...<span class="hljs-comment">//更加简洁，自动关闭</span><br></code></pre></td></tr></table></figure><h2 id="三、Python对xsv的支持"><a href="#三、Python对xsv的支持" class="headerlink" title="三、Python对xsv的支持"></a>三、Python对xsv的支持</h2><p>在Python中，有对csv的支持，其它变体（包括tsv）一律视为其中的<code>delimiter</code>等参数不同。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> csv<br></code></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/library/csv.html">Python csv Document</a></p><p><a href="https://docs.python.org/zh-cn/3/library/csv.html">Python csv 官方文档</a></p><h3 id="1、csv文件的读取"><a href="#1、csv文件的读取" class="headerlink" title="1、csv文件的读取"></a>1、csv文件的读取</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">csv.reader(csvfile, <span class="hljs-attribute">dialect</span>=<span class="hljs-string">&#x27;excel&#x27;</span>, *<span class="hljs-number">*f</span>mtparams)<br></code></pre></td></tr></table></figure><ul><li><code>return</code>: <code>reader</code>对象</li><li><code>csvfile</code>: 文件路径</li><li><code>dialect</code>: 指明读取的对象是何种csv文件的变体，如tsv。</li><li><code>**fmtparams</code>：<strong>变种与格式参数</strong> 覆盖当前变种(dialect)的单个格式设置</li></ul><blockquote><p>Python认定csv格式的各种变种都是通过改了一堆参数得到的，（参见python文档），如</p><blockquote><p>dialect.delimiler 用于分隔字段的单字符，默认为逗号”,”<br>dialect.doublequole …<br>dialect.escapechar …<br>..</p></blockquote></blockquote><h3 id="2、iterator迭代器"><a href="#2、iterator迭代器" class="headerlink" title="2、iterator迭代器"></a>2、iterator迭代器</h3><p>引子：csv.reader()使用的对象只需要下列两点，即可顺利打开</p><blockquote><ol><li>满足iterator协议</li><li>并且每次都调用<code>__next__()</code>方法都返回<code>str</code> </li></ol><p>关键字：iterator协议；__next()__</p></blockquote><p><strong>迭代器对象</strong>：表示一串数据的对象，如<code>csv.reader()</code>返回的<code>reader</code>对象。配合使用<code>__next__()</code>方法即可逐行获得字符串。</p><p><img src="https://gitee.com/songz7026/image-pool/raw/master/Python/xsv_iterator.png" alt="iterator对象示意图"></p><ul><li><code>__next__()</code>：返回迭代器对象中的下一项，到达最后一项溢出会引发<code>StopIteration</code>异常</li></ul><h3 id="3、csv-reader-和csv-writerow"><a href="#3、csv-reader-和csv-writerow" class="headerlink" title="3、csv.reader()和csv.writerow()"></a>3、csv.reader()和csv.writerow()</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> datasets1 = <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-comment"># 设置文件路径</span><br><span class="hljs-meta">&gt;&gt;</span> obj_file1 = open(datasets1) <span class="hljs-comment"># 获得file类型文件obj_file</span><br><span class="hljs-meta">&gt;&gt;</span> obj_reader = csv.reader(obj_file1) <span class="hljs-comment"># 获得reader类型文件；reader(csvfile)接受csvfile类型作为参数，file类型被向下转换到csvfile类型</span><br><br><span class="hljs-meta">&gt;&gt;</span> datasets2 = <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-comment"># 设置文件路径</span><br><span class="hljs-meta">&gt;&gt;</span> obj_file2 = open(datasets2,<span class="hljs-string">&#x27;w&#x27;</span>) <br><span class="hljs-meta">&gt;&gt;</span> obj_file2.writerow([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">33</span>])<br><span class="hljs-meta">&gt;&gt;</span> obj_file2.writerow([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;</span> obj_file2.writerow([<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><p>经过测试，发现再writerow()后还插入了一个空行，导致插入多行时会产生大量冗余的空行。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 生成的文件</span><br><span class="hljs-attribute">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">33</span><br><br><span class="hljs-attribute">1</span>，<span class="hljs-number">3</span>，<span class="hljs-number">5</span><br><br><span class="hljs-attribute">6</span>，<span class="hljs-number">4</span>，<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>查看文档发现是由于没有在<code>open()</code>阶段设置换行符参数<code>newline</code>，因为不同的系统有不同的换行符，如<code>Windows</code>采用<code>CRLF</code>(回车换行’\r\n’)，<code>Linux</code>采用<code>LF</code>(换行’\n’)。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> datasets = <span class="hljs-string">&#x27;...&#x27;</span><br><span class="hljs-meta">&gt;&gt;</span> obj_file = open(dataset,<span class="hljs-string">&#x27;w&#x27;</span>,newline=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;</span> obj_file2.writerow([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">33</span>])<br><span class="hljs-meta">&gt;&gt;</span> obj_file2.writerow([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;</span> obj_file2.writerow([<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 生成的文件</span><br><span class="hljs-attribute">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">33</span><br><span class="hljs-attribute">1</span>，<span class="hljs-number">3</span>，<span class="hljs-number">5</span><br><span class="hljs-attribute">6</span>，<span class="hljs-number">4</span>，<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="4、遍历csv"><a href="#4、遍历csv" class="headerlink" title="4、遍历csv"></a>4、遍历csv</h3><p>笔者利用迭代器的<strong>next</strong>()方法在最后一行之后继续调用会产生<code>StopIteration</code>异常这一特性，想出了如下代码以遍历整个csv文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>datasets = <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-comment"># 设置文件路径</span><br>obj_file = <span class="hljs-built_in">open</span>(datasets) <span class="hljs-comment"># 获得file类型文件obj_file</span><br>obj_reader = csv.reader(obj_file) <span class="hljs-comment"># 获得reader类型文件；reader(csvfile)接受csvfile类型作为参数，file类型被向下转换到csvfile类型</span><br><br>row = obj_reader.__next__()<br><span class="hljs-keyword">except</span> StopIteration:<br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="5、其它"><a href="#5、其它" class="headerlink" title="5、其它"></a>5、其它</h3><p>笔者在测试过程中，发现单纯使用<code>open()</code>得到的<code>file</code>类型也有迭代器方法<code>__next__()</code>，因此将二者做了对比如下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-meta">&gt;&gt;</span> datasets = <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-comment"># 设置文件路径</span><br><span class="hljs-meta">&gt;&gt;</span> obj_file = open(datasets) <span class="hljs-comment"># 获得file类型文件obj_file</span><br><span class="hljs-meta">&gt;&gt;</span> obj_reader = csv.reader(obj_file) <span class="hljs-comment"># 获得reader类型文件；reader(csvfile)接受csvfile类型作为参数，file类型被向下转换到csvfile类型</span><br><br><span class="hljs-meta">&gt;&gt;</span> obj_file.__next__()<br><span class="hljs-string">&#x27;0,tcp,http,SF,181,5450,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,8,8,0.00,0.00,0.00,0.00,1.00,0.00,0.00,9,9,1.00,0.00,0.11,0.00,0.00,0.00,0.00,0.00,normal.\n&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;</span> obj_reader.__next__()<br>[<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;tcp&#x27;</span>, <span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-string">&#x27;SF&#x27;</span>, <span class="hljs-string">&#x27;239&#x27;</span>, <span class="hljs-string">&#x27;486&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;1.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;19&#x27;</span>, <span class="hljs-string">&#x27;19&#x27;</span>, <span class="hljs-string">&#x27;1.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.05&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;normal.&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;</span> obj_file.__next__()<br><span class="hljs-string">&#x27;0,tcp,http,SF,235,1337,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,8,8,0.00,0.00,0.00,0.00,1.00,0.00,0.00,29,29,1.00,0.00,0.03,0.00,0.00,0.00,0.00,0.00,normal.\n&#x27;</span><br><br><span class="hljs-meta">&gt;&gt;</span> obj_reader.__next__()<br>[<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;tcp&#x27;</span>, <span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-string">&#x27;SF&#x27;</span>, <span class="hljs-string">&#x27;219&#x27;</span>, <span class="hljs-string">&#x27;1337&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;1.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;39&#x27;</span>, <span class="hljs-string">&#x27;39&#x27;</span>, <span class="hljs-string">&#x27;1.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.03&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;0.00&#x27;</span>, <span class="hljs-string">&#x27;normal.&#x27;</span>]<br><br><span class="hljs-meta">&gt;&gt;</span> type(obj_file.__next__())<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">str</span>&#x27;&gt;</span><br><br><span class="hljs-meta">&gt;&gt;</span> type(obj_reader.__next__())<br>&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">list</span>&#x27;&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns"># 实验使用的KDD99_10_percent 最初的几行<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">181,5450,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,8</span>,<span class="hljs-number">8,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,9</span>,<span class="hljs-number">9,1.00,0</span>.<span class="hljs-number">00,0.11,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">239,486,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,8</span>,<span class="hljs-number">8,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,19</span>,<span class="hljs-number">19,1.00,0</span>.<span class="hljs-number">00,0.05,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">235,1337,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,8</span>,<span class="hljs-number">8,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,29</span>,<span class="hljs-number">29,1.00,0</span>.<span class="hljs-number">00,0.03,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">219,1337,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,6</span>,<span class="hljs-number">6,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,39</span>,<span class="hljs-number">39,1.00,0</span>.<span class="hljs-number">00,0.03,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">217,2032,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,6</span>,<span class="hljs-number">6,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,49</span>,<span class="hljs-number">49,1.00,0</span>.<span class="hljs-number">00,0.02,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">217,2032,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,6</span>,<span class="hljs-number">6,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,59</span>,<span class="hljs-number">59,1.00,0</span>.<span class="hljs-number">00,0.02,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">212,1940,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">2,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,1.00,1</span>,<span class="hljs-number">69,1.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">04,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">159,4087,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,5</span>,<span class="hljs-number">5,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,11</span>,<span class="hljs-number">79,1.00,0</span>.<span class="hljs-number">00,0.09,0</span>.<span class="hljs-number">04,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">210,151,0,0</span>,<span class="hljs-number">0,0,0,1</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,8,8</span>,<span class="hljs-number">0.00,0.00</span>,<span class="hljs-number">0.00,0.00</span>,<span class="hljs-number">1.00,0.00</span>,<span class="hljs-number">0.00,8,89</span>,<span class="hljs-number">1.00,0.00</span>,<span class="hljs-number">0.12,0.04</span>,<span class="hljs-number">0.00,0.00</span>,<span class="hljs-number">0.00,0.00</span>,normal.<br><span class="hljs-number">0</span>,tcp,http,SF,<span class="hljs-number">212,786,0</span>,<span class="hljs-number">0,0,1,0</span>,<span class="hljs-number">1,0,0,0</span>,<span class="hljs-number">0,0,0,0</span>,<span class="hljs-number">0,0,0,8</span>,<span class="hljs-number">8,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00,1.00,0</span>.<span class="hljs-number">00,0.00,8</span>,<span class="hljs-number">99,1.00,0</span>.<span class="hljs-number">00,0.12,0</span>.<span class="hljs-number">05,0.00,0</span>.<span class="hljs-number">00,0.00,0</span>.<span class="hljs-number">00</span>,normal.<br>...<br></code></pre></td></tr></table></figure><p>通过对比可以发现，数据集获得的<code>file</code>对象和<code>reader</code>对象关于迭代方法的异同有</p><ol><li><p>共同点：均可迭代</p></li><li><p>共同点：实验中两个有关联的对象的迭代指针是<strong>共享</strong>的。</p></li><li><p>不同点：返回的类型不同。分别是<code>str</code>和<code>list</code></p></li></ol><p>进一步了解这涉及到了Python中重要的<strong>迭代器</strong>和<strong>生成器</strong>，Python中很多数据类型都可以作为迭代器，关于更详细的迭代器的内容与本文不大，不做赘述。</p><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><p>[1]. <a href="https://zh.wikipedia.org/wiki/%E5%88%B6%E8%A1%A8%E7%AC%A6%E5%88%86%E9%9A%94%E5%80%BC">wikipida: 制表符分隔值</a><br>[2]. <a href="https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC">wikipida: 逗号分隔值</a><br>[3]. <a href="https://www.runoob.com/python/python-func-open.html">菜鸟教程：Python open() 函数</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>文件读取(File I/O)</tag>
      
      <tag>迭代器</tag>
      
      <tag>csv文件</tag>
      
      <tag>with()</tag>
      
      <tag>open()</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KDD99数据集的特征(Features)介绍</title>
    <link href="/2021/01/17/KDD99%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E7%89%B9%E5%BE%81(Features)%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/01/17/KDD99%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E7%89%B9%E5%BE%81(Features)%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="KDD99数据集的特征-Features-介绍"><a href="#KDD99数据集的特征-Features-介绍" class="headerlink" title="KDD99数据集的特征(Features)介绍"></a>KDD99数据集的特征(Features)介绍</h1><p>KDD99是一个用来从正常连接中监测非正常连接的数据集。产出于1999年Thrid International Knowlegde Discovery and Data Mining Tools Competition，其目的是建立一个稳定的的入侵检测系统。</p><p>KDD99包含了置入攻击的军事网络环境中的记录。攻击可以分类为：</p><ul><li><strong>DoS攻击</strong>：Denial of Service</li><li><strong>R2U</strong>：Remote to User</li><li><strong>U2R</strong>：User to Root</li><li><strong>探针攻击</strong>：Probing</li></ul><p>KDD99数据集是 <em>DARPA数据集</em> 的 <strong>特征提取(Feature Extract)</strong> 版本（ <em>DARPA</em> 是原始数据集）KDD99对每个连接提取了 <strong>41</strong> 个特征，使用<strong>Bro-IDS</strong>工具对数据贴标签。</p><p>其41个特征可以按以下方式分类：</p><ul><li>1-9    TCP连接的基本特征</li><li>10-22    TCP连接的内容特征</li><li>23-31    基于时间的网络流量统计特征，使用2秒的时间窗(Traffic features computed using a two-second time window)</li><li>32-41    基于主机的网络流量统计特征，主机特征(Host features)，用来评估持续时间在两秒钟以上的攻击</li></ul><h2 id="TCP连接的基本特征"><a href="#TCP连接的基本特征" class="headerlink" title="TCP连接的基本特征"></a>TCP连接的基本特征</h2><table><thead><tr><th align="center">feature name</th><th>description</th><th align="center">type</th></tr></thead><tbody><tr><td align="center">duration</td><td>length (number of seconds) of the connection<br>连接的持续时间，以秒(s)为单位<br><strong>[0 ~ 58329]</strong><br>它的定义是从TCP连接以3次握手建立算起，到FIN/ACK连接结束为止的时间；若为UDP协议类型，则将每个UDP数据包作为一条连接。(数据集中出现大量的duration=0 的情况，是因为该条连接的持续时间不足1秒.)</td><td align="center">continuous<br>连续</td></tr><tr><td align="center">protocol_type</td><td>type of the protocol, e.g. tcp, udp, etc.<br>协议类型，此数据集中有三种：<br><strong>TCP, UDP, ICMP</strong></td><td align="center">discrete<br>离散</td></tr><tr><td align="center">service</td><td>network service on the destination, e.g., http, telnet, etc.<br>连接目的端的网络服务。有70+种：<br><strong>aol, auth, bgp, courier, csnet_ns, ctf, daytime, discard, domain, domain_u, echo, eco_i, ecr_i, efs, exec, finger, ftp, ftp_data, gopher, harvest, hostnames, http, http_2784, http_443, http_8001, imap4, IRC, iso_tsap, klogin, kshell, ldap, link, login, mtp, name, netbios_dgm, netbios_ns, netbios_ssn, netstat, nnsp, nntp, ntp_u, other, pm_dump, pop_2, pop_3, printer, private, red_i, remote_job, rje, shell, smtp, sql_net, ssh, sunrpc, supdup, systat, telnet, tftp_u, tim_i, time, urh_i, urp_i, uucp, uucp_path, vmnet, whois, X11, Z39_50</strong></td><td align="center">discrete<br>离散</td></tr><tr><td align="center">src_bytes</td><td>number of data bytes from source to destination<br>从源主机到目的主机数据的字节数<br><strong>[0 ~ 1379963888]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">dst_bytes</td><td>number of data bytes from destination to source<br>从目的主机到源主机数据的字节数<br><strong>[0 ~ 1309937401]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">flag</td><td>normal or error status of the connection<br>连接状态正常或错误的标志，共11中<br><strong>OTH, REJ, RSTO, RSTOS0, RSTR, S0, S1, S2, S3, SF, SH</strong><br>表示该连接是否按照协议要求开始或完成。例如SF表示连接正常建立并终止；S0表示只接到了SYN请求数据包，而没有后面的SYN/ACK。其中SF表示正常，其他10种都是error。<br>11种状态的详细解释，参考文章[4]</td><td align="center">discrete<br>离散</td></tr><tr><td align="center">land</td><td>1 if connection is from/to the same host/port; 0 otherwise<br> <strong>1:</strong> 连接来自/到同一主机/端口<br> <strong>0:</strong> 其它</td><td align="center">discrete<br>离散</td></tr><tr><td align="center">wrong_fragment</td><td>number of ``wrong’’ fragments<br>“错误”片段的数量<br><strong>[0 ~ 3]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">urgent</td><td>number of urgent packets<br>urgent加急包数量<br><strong>[0 ~ 14]</strong></td><td align="center">continuous<br>连续</td></tr></tbody></table><center><p>Table 1: Basic features of individual TCP connections.</p><p>表1：TCP连接的基本特征</p></center><h2 id="TCP连接的内容特征"><a href="#TCP连接的内容特征" class="headerlink" title="TCP连接的内容特征"></a>TCP连接的内容特征</h2><table><thead><tr><th align="center">feature name</th><th>description</th><th align="center">type</th></tr></thead><tbody><tr><td align="center">hot</td><td>number of ``hot’’ indicators<br>访问系统敏感文件和目录的次数<br><strong>[0 ~ 101]</strong><br>例如访问系统目录，建立或执行程序等</td><td align="center">continuous<br>连续</td></tr><tr><td align="center">num_failed_logins</td><td>number of failed login attempts<br>登录尝试失败的次数。<br><strong>[0 ~ 5]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">logged_in</td><td>1 if successfully logged in<br>0 otherwise<br><strong>1</strong>：成功登录<br><strong>0</strong>：其它</td><td align="center">discrete<br>离散</td></tr><tr><td align="center">num_compromised</td><td>number of ``compromised’’ conditions<br>‘compromised’条件出现的次数<br><strong>[0 ~ 7479]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">root_shell</td><td>1 if root shell is obtained; 0 otherwise<br><strong>1</strong>：获得root shell<br><strong>0</strong>：其它</td><td align="center">discrete<br>离散</td></tr><tr><td align="center">su_attempted</td><td>1 if ``su root’’ command attempted; 0 otherwise<br><strong>1</strong>：出现’su root’<br><strong>0</strong>：其它</td><td align="center">discrete<br>离散</td></tr><tr><td align="center">num_root</td><td>number of ``root’’ accesses<br>root用户访问次数<br><strong>[0 ~ 7468]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">num_file_creations</td><td>number of file creation operations<br>文件创建操作的次数<br><strong>[0 ~ 100]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">num_shells</td><td>number of shell prompts<br>使用shell命令的次数<br><strong>[0 ~ 5]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">num_access_files</td><td>number of operations on access control files<br>访问控制文件的次数<br><strong>[0 ~ 9]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">num_outbound_cmds</td><td>number of outbound commands in an ftp session<br>一个FTP会话种出现连接的次数<br><strong>数据集种这一特征出现次数为0</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">is_hot_login</td><td>1 if the login belongs to the ``hot’’ list; 0 otherwise<br><strong>1</strong>：登录属于’hot’列表<br><strong>0</strong>：其它<br>如超级用户或管理员登录</td><td align="center">discrete<br>离散</td></tr><tr><td align="center">is_guest_login</td><td>1 if the login is a ``guest’’login; 0 otherwise<br><strong>1</strong>：guest登录<br><strong>0</strong>：其它</td><td align="center">discrete<br>离散</td></tr></tbody></table><center><p>Table 2: Content features within a connection suggested by domain knowledge.</p><p>表2：TCP连接的内容特征</p></center><h2 id="基于时间的网络流量统计特征"><a href="#基于时间的网络流量统计特征" class="headerlink" title="基于时间的网络流量统计特征"></a>基于时间的网络流量统计特征</h2><table><thead><tr><th align="center">feature name</th><th>description</th><th align="center">type</th></tr></thead><tbody><tr><td align="center">count</td><td>number of connections to the same host as the current connection in the past two seconds<br><strong>Note:</strong> The following  features refer to these same-host connections.<br>过去两秒内，与当前连接具有相同的目标主机的连接数。<br><strong>[0 ~ 511]</strong><br> <strong>注意：</strong> 以下特征连接到相同主机</td><td align="center">continuous<br>连续</td></tr><tr><td align="center">srv_count</td><td>number of connections to the same service as the current connection in the past two seconds<br><strong>Note:</strong> The following features refer to these same-service connections.<br>过去两秒内，与当前连接具有相同服务的连接数<br><strong>[0 ~ 511]</strong><br> <strong>注意：</strong> 以下特征连接到相同服务</td><td align="center">continuous<br>连续</td></tr><tr><td align="center">serror_rate</td><td>% of connections that have ``SYN’’ errors<br>过去两秒内，在与当前连接具有相同目标主机的连接中，出现“SYN” 错误的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">rerror_rate</td><td>% of connections that have ``REJ’’ errors<br>过去两秒内，在与当前连接具有相同目标主机的连接中，出现“REJ” 错误的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">same_srv_rate</td><td>% of connections to the same service<br>过去两秒内，在与当前连接具有相同目标主机的连接中，与当前连接具有相同服务的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">diff_srv_rate</td><td>% of connections to different services<br>过去两秒内，在与当前连接具有相同目标主机的连接中，与当前连接具有不同服务的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">srv_serror_rate</td><td>% of connections that have ``SYN’’ errors<br>过去两秒内，在与当前连接具有相同服务的连接中，出现“SYN” 错误的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">srv_rerror_rate</td><td>% of connections that have ``REJ’’ errors<br>过去两秒内，在与当前连接具有相同服务的连接中，出现“REJ” 错误的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center">srv_diff_host_rate</td><td>% of connections to different hosts<br>过去两秒内，在与当前连接具有相同服务的连接中，与当前连接具有不同目标主机的连接的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">continuous<br>连续</td></tr><tr><td align="center"><font size=2></td><td></td><td align="center"></td></tr></tbody></table><ul><li><p>count、serror_rate、rerror_rate、same_srv_rate、diff_srv_rate这5个特征是 same host特征，前提都是与当前连接具有相同目标主机的连接；</p></li><li><p>srv_count、srv_serror_rate、srv_rerror_rate、srv_diff_host_rate这4个特征是same service特征，前提都是与当前连接具有相同服务的连接。</p></li></ul></font><center>Table 3: Traffic features computed using a two-second time window.<p>表 3：基于时间的网络流量统计特征</p></center><h2 id="基于主机的网络流量统计特征"><a href="#基于主机的网络流量统计特征" class="headerlink" title="基于主机的网络流量统计特征"></a>基于主机的网络流量统计特征</h2><table><thead><tr><th align="center">feature name</th><th>description</th><th align="center">type</th></tr></thead><tbody><tr><td align="center">dst_host_count</td><td>前100个连接中，与当前连接具有相同目标主机的连接数<br><strong>[0 ~ 255]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_srv_count</td><td>前100个连接中，与当前连接具有相同目标主机相同服务的连接数<br><strong>[0 ~ 255]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_same_srv_rate</td><td>前100个连接中，与当前连接具有相同目标主机相同服务的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_diff_srv_rate</td><td>前100个连接中，与当前连接具有相同目标主机不同服务的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_same_src_port_rate</td><td>前100个连接中，与当前连接具有相同目标主机相同源端口的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_srv_diff_host_rate</td><td>前100个连接中，与当前连接具有相同目标主机相同服务的连接中，与当前连接具有不同源主机的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_serror_rate</td><td>前100个连接中，与当前连接具有相同目标主机的连接中，出现SYN错误的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_srv_serror_rate</td><td>前100个连接中，与当前连接具有相同目标主机相同服务的连接中，出现SYN错误的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_rerror_rate</td><td>前100个连接中，与当前连接具有相同目标主机的连接中，出现REJ错误的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr><tr><td align="center">dst_host_srv_rerror_rate</td><td>前100个连接中，与当前连接具有相同目标主机相同服务的连接中，出现REJ错误的连接所占的百分比<br><strong>[0.00 ~ 1.00]</strong></td><td align="center">连续</td></tr></tbody></table><center><p>表 4:基于主机的网络流量统计特征（<a href="http://kdd.ics.uci.edu/databases/kddcup99/task.html">KDD99官网的task部分</a>没找到对应表格）</p></center><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>KDD99在研究者当中十分流行，研究者也对其本身做了很多工作：</p><ul><li>[*]减少特征数量，从最初的41个特征中选择最有用的特征</li><li>[*]指出了KDD99的不足之处<blockquote><ol><li>KDD99面临不平衡的分类方法问题。测试集和训练集的概率分布是不同的，由于在训练集中加入新的攻击，攻击和正常流量的类别的平衡会被打破。[?]</li><li>数据集太老了，可能存在过时的问题</li><li>有研究表明，该数据集存在导致对异常检测性能的过高估计的可能性</li></ol></blockquote></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]. CHAABOUNI N, MOSBAH M, ZEMMARI A, et al. Network Intrusion Detection for IoT Security Based on Learning Techniques [J]. Ieee Communications Surveys and Tutorials, 2019, 21(3): 2671-701.<br>[2]. <a href="http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html">KDD Cup 1999 Data</a><br>[3]. <a href="https://mathpretty.com/10244.html">KDD99数据集与NSL-KDD数据集介绍</a> <em>BTW： 这篇博客对 KDD99 和 NSL-KDD 写的很详细</em><br>[4]. Song J, Takakura H, Okabe Y. Description of kyoto university benchmark data[J]. Available at link: <a href="http://www.takakura.com/Kyoto_data/BenchmarkData-Description-v5.pdf">http://www.takakura.com/Kyoto_data/BenchmarkData-Description-v5.pdf</a> [Accessed on 15 March 2016], 2006.<br>[5]. Özgür A, Erdem H. A review of KDD99 dataset usage in intrusion detection and machine learning between 2010 and 2015[J]. PeerJ Preprints, 2016, 4: e1954v1.</p>]]></content>
    
    
    <categories>
      
      <category>机器学习应用于信息安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>KDD99</tag>
      
      <tag>信息安全</tag>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo的安装与配置</title>
    <link href="/2021/01/17/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/17/hexo%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo的安装与初始配置"><a href="#Hexo的安装与初始配置" class="headerlink" title="Hexo的安装与初始配置"></a>Hexo的安装与初始配置</h1><h2 id="一、Hexo安装准备"><a href="#一、Hexo安装准备" class="headerlink" title="一、Hexo安装准备"></a>一、Hexo安装准备</h2><p>安装Hexo的前置需求有：</p><ul><li><strong>Node.js</strong>：主要是使用其中的npm包管理工具（<a href="https://hexo.io/zh-cn/docs/">Hexo官网</a>建议使用Node.js 12.0版本，最低Node.js 10.13） </li><li><strong>Git</strong>：版本控制工具，主要用于博客的版本控制、远端存储和同步</li></ul><h2 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h2><p>安装好上述软件需求后，在shell终端输入以下指令，即可完成安装Hexo。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>安装过程中可能遇到的问题：</p><ol><li>安装过程缓慢或卡在某个过程中不动弹。可以考虑修改npm的默认下载源，如<strong>淘宝镜像源</strong>。</li><li>Windows可以在<strong>Git Bash</strong>中进行类似Linux中的指令。</li></ol><p>安装好hexo之后，如此使用：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ npx hexo &lt;<span class="hljs-keyword">command</span>&gt;<br></code></pre></td></tr></table></figure><p>为了方便起见，我们更倾向于直接使用hexo指令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta"># hexo <span class="hljs-meta-string">&lt;command&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>方法一：可以考虑将hexo加入PATH</li><li>方法二：设置alias hexo=’npx hexo’</li><li>方法三：(Windows系统)，使用<strong>git bash</strong>貌似可以不用设置环境PATH。但是存在一个小问题，直接运行<strong>git bash</strong>无法正确运行hexo指令，但从文件夹窗口中使用右键菜单<strong>在此处打开git bash</strong>可以直接使用<code>hexo &lt;command&gt;</code></li><li>方法三小问题的原因：<code>hexo &lt;command&gt;</code>需要在blog根目录下执行，因此其它路径会报错。</li></ul><h2 id="三、初始配置"><a href="#三、初始配置" class="headerlink" title="三、初始配置"></a>三、初始配置</h2><p>自此开始，默认使用简化的形式</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ hero &lt;<span class="hljs-keyword">command</span>&gt;<br></code></pre></td></tr></table></figure><p>安装好Hexo之后，要初始化一个工作目录，类似于git中的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>执行指令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;directory&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;directory&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>逐条解析：</p><ol><li><code>hexo init &lt;directory&gt;</code>：格式化指定路径为hexo工作目录。</li></ol><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ll &lt;directory&gt;<br>total 116<br>-rw-r--r--<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span>   <span class="hljs-number"> 0 </span>  _config.landscape.yml<br>-rw-r--r--<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span><span class="hljs-number"> 2545 </span>  _config.yml<br>drwxr-xr-x<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span>   <span class="hljs-number"> 0 </span>  node_modules/<br>-rw-r--r--<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span> <span class="hljs-number"> 641 </span>  package.json<br>-rw-r--r--<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span>57736   package-lock.json<br>drwxr-xr-x<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span>   <span class="hljs-number"> 0 </span>  scaffolds/<br>drwxr-xr-x<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span>   <span class="hljs-number"> 0 </span>  source/<br>drwxr-xr-x<span class="hljs-number"> 1 </span><span class="hljs-number"> 197609 </span>   <span class="hljs-number"> 0 </span>  themes/<br></code></pre></td></tr></table></figure><ol start="2"><li><code>cd &lt;directory&gt;</code>：切换到工作目录</li><li><code>npm install</code>：使用<code>npm</code>根据<code>&lt;directory&gt;</code>中的配置文件下载相关的依赖文件。</li></ol><h2 id="四、个性化设置"><a href="#四、个性化设置" class="headerlink" title="四、个性化设置"></a>四、个性化设置</h2><p>关于hexo博客的个性化设置，离不开<code>&lt;hexo&gt;/_config.yml</code></p><h3 id="1、设置博客标题、基本信息等"><a href="#1、设置博客标题、基本信息等" class="headerlink" title="1、设置博客标题、基本信息等"></a>1、设置博客标题、基本信息等</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs makefile">$ vim _config.yml<br>...<br><span class="hljs-comment"># Site</span><br><span class="hljs-section">title: 设置博客标题</span><br><span class="hljs-section">subtitle: &#x27;&#x27;</span><br><span class="hljs-section">description: &#x27;&#x27;</span><br><span class="hljs-section">keywords:</span><br><span class="hljs-section">author: 作者姓名</span><br><span class="hljs-section">language: 语言，中文设置为zh即可</span><br><span class="hljs-section">timezone: 国内一般使用Asia/Shanghai即可</span><br>...<br></code></pre></td></tr></table></figure><p>此处抛砖引玉，更多相关设置使用时实时查阅即可</p><h3 id="2、设置博客主题-theme"><a href="#2、设置博客主题-theme" class="headerlink" title="2、设置博客主题(theme)"></a>2、设置博客主题(theme)</h3><p><a href="https://hexo.io/zh-cn/">Hexo官网</a>共享了很多主题。</p><p><img src="https://gitee.com/songz7026/image-pool/raw/master/note_hexo/hexo_theme.png" alt="Hexo官网主题"></p><p>任选一款进入，即可找到作者的github主页连接，在其中寻找hexo的主题仓库即可，一般在readme中都会详细介绍主题的安装方法。不过一般来说都是一样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> &lt;directory&gt;</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> &lt;github_theme仓库的连接&gt;</span><br></code></pre></td></tr></table></figure><p>在此之后修改<code>_config.yml</code>中的<code>theme</code>即可</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"># Extensions<br>## Plugins: https:<span class="hljs-comment">//hexo.io/plugins/</span><br>## Themes: https:<span class="hljs-comment">//hexo.io/themes/</span><br>theme: 这里这里这里 theme名称填上去就可以了<br></code></pre></td></tr></table></figure><p>个别theme会有自己的安装方法，按照readme详细做就可以了。</p><h2 id="五、查看博客"><a href="#五、查看博客" class="headerlink" title="五、查看博客"></a>五、查看博客</h2><p>在shell中键入以下指令即可开启本地服务，从本地浏览器输入对应连接(下文对应链接为localhost:4000)即可查看</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ hexo <span class="hljs-keyword">server</span><br><span class="hljs-keyword">INFO</span>  Validating config<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/songz7026/image-pool/raw/master/note_hexo/hexo_init_blog.png" alt="初始状态博客首页"></p><p>使用<code>-o</code>选项可以自动使用系统默认浏览器打开</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ hexo <span class="hljs-keyword">server</span> -o<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/15/hello-world/"/>
    <url>/2021/01/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
